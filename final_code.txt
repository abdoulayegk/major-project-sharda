{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "65080035-6c3c-4e46-b4c2-f28ce0438d86",
   "metadata": {},
   "source": [
    "### Motivation\n",
    "1. Taking advantage of the amount of data that is available nowadays, the authors performed statistical analysis and machine learning to extract knowledge in the current situation of financial inclusion and the factors affecting it. By applying advanced machine learning algorithms to the financial inclusion dataset to predict a personâ€™s likelihood of having a bank account. This would enable the financial institutions to get an understanding of what features make a person capable of having a bank account. Having all that reliable information or guidance, financial institutions can take considerable measures and create a system or come up with a strategy that will help make all members of the society (regardless of class or gender) aware of financial inclusion and its benefits.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a1c985fa-b960-449f-af76-2e56e7fd237a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import warnings\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "from pandas_profiling import profile_report\n",
    "\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "from catboost import CatBoostClassifier\n",
    "from imblearn.over_sampling import SMOTE\n",
    "from lightgbm import LGBMClassifier\n",
    "from sklearn.ensemble import (\n",
    "    AdaBoostClassifier,\n",
    "    GradientBoostingClassifier,\n",
    "    HistGradientBoostingClassifier,\n",
    "    RandomForestClassifier,\n",
    ")\n",
    "\n",
    "# import classification algorithm\n",
    "from sklearn.experimental import enable_hist_gradient_boosting\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "# evaluation matrics\n",
    "from sklearn.metrics import (\n",
    "    accuracy_score,\n",
    "    f1_score,\n",
    "    precision_score,\n",
    "    recall_score,\n",
    "    roc_auc_score,\n",
    ")\n",
    "from sklearn.model_selection import (\n",
    "    KFold,\n",
    "    StratifiedKFold,\n",
    "    cross_val_score,\n",
    "    train_test_split,\n",
    ")\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "\n",
    "# import preprocessing module\n",
    "from sklearn.preprocessing import LabelEncoder, MinMaxScaler, StandardScaler\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from xgboost import XGBClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5ab2b5e7-1f44-49ea-8a61-9b44a70efdaf",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Sed set up\n",
    "import numpy as np\n",
    "from numpy import random\n",
    "\n",
    "random.seed(42)\n",
    "seed = np.random.seed(42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "29238508-9ee0-439d-99cc-95525b73f3b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8eadc88c-1f19-460b-9de8-ed31632c7662",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country</th>\n",
       "      <th>year</th>\n",
       "      <th>uniqueid</th>\n",
       "      <th>bank_account</th>\n",
       "      <th>location_type</th>\n",
       "      <th>cellphone_access</th>\n",
       "      <th>household_size</th>\n",
       "      <th>age_of_respondent</th>\n",
       "      <th>gender_of_respondent</th>\n",
       "      <th>relationship_with_head</th>\n",
       "      <th>marital_status</th>\n",
       "      <th>education_level</th>\n",
       "      <th>job_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Kenya</td>\n",
       "      <td>2018</td>\n",
       "      <td>uniqueid_1</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Rural</td>\n",
       "      <td>Yes</td>\n",
       "      <td>3</td>\n",
       "      <td>24</td>\n",
       "      <td>Female</td>\n",
       "      <td>Spouse</td>\n",
       "      <td>Married/Living together</td>\n",
       "      <td>Secondary education</td>\n",
       "      <td>Self employed</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Kenya</td>\n",
       "      <td>2018</td>\n",
       "      <td>uniqueid_2</td>\n",
       "      <td>No</td>\n",
       "      <td>Rural</td>\n",
       "      <td>No</td>\n",
       "      <td>5</td>\n",
       "      <td>70</td>\n",
       "      <td>Female</td>\n",
       "      <td>Head of Household</td>\n",
       "      <td>Widowed</td>\n",
       "      <td>No formal education</td>\n",
       "      <td>Government Dependent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Kenya</td>\n",
       "      <td>2018</td>\n",
       "      <td>uniqueid_3</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Urban</td>\n",
       "      <td>Yes</td>\n",
       "      <td>5</td>\n",
       "      <td>26</td>\n",
       "      <td>Male</td>\n",
       "      <td>Other relative</td>\n",
       "      <td>Single/Never Married</td>\n",
       "      <td>Vocational/Specialised training</td>\n",
       "      <td>Self employed</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Kenya</td>\n",
       "      <td>2018</td>\n",
       "      <td>uniqueid_4</td>\n",
       "      <td>No</td>\n",
       "      <td>Rural</td>\n",
       "      <td>Yes</td>\n",
       "      <td>5</td>\n",
       "      <td>34</td>\n",
       "      <td>Female</td>\n",
       "      <td>Head of Household</td>\n",
       "      <td>Married/Living together</td>\n",
       "      <td>Primary education</td>\n",
       "      <td>Formally employed Private</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Kenya</td>\n",
       "      <td>2018</td>\n",
       "      <td>uniqueid_5</td>\n",
       "      <td>No</td>\n",
       "      <td>Urban</td>\n",
       "      <td>No</td>\n",
       "      <td>8</td>\n",
       "      <td>26</td>\n",
       "      <td>Male</td>\n",
       "      <td>Child</td>\n",
       "      <td>Single/Never Married</td>\n",
       "      <td>Primary education</td>\n",
       "      <td>Informally employed</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  country  year    uniqueid bank_account location_type cellphone_access  \\\n",
       "0   Kenya  2018  uniqueid_1          Yes         Rural              Yes   \n",
       "1   Kenya  2018  uniqueid_2           No         Rural               No   \n",
       "2   Kenya  2018  uniqueid_3          Yes         Urban              Yes   \n",
       "3   Kenya  2018  uniqueid_4           No         Rural              Yes   \n",
       "4   Kenya  2018  uniqueid_5           No         Urban               No   \n",
       "\n",
       "   household_size  age_of_respondent gender_of_respondent  \\\n",
       "0               3                 24               Female   \n",
       "1               5                 70               Female   \n",
       "2               5                 26                 Male   \n",
       "3               5                 34               Female   \n",
       "4               8                 26                 Male   \n",
       "\n",
       "  relationship_with_head           marital_status  \\\n",
       "0                 Spouse  Married/Living together   \n",
       "1      Head of Household                  Widowed   \n",
       "2         Other relative     Single/Never Married   \n",
       "3      Head of Household  Married/Living together   \n",
       "4                  Child     Single/Never Married   \n",
       "\n",
       "                   education_level                   job_type  \n",
       "0              Secondary education              Self employed  \n",
       "1              No formal education       Government Dependent  \n",
       "2  Vocational/Specialised training              Self employed  \n",
       "3                Primary education  Formally employed Private  \n",
       "4                Primary education        Informally employed  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train = pd.read_csv(\"Train_v2.csv\")\n",
    "test = pd.read_csv(\"Test_v2.csv\")\n",
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "95762195-b6c1-4e8f-b2dc-917486a6f5c3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country</th>\n",
       "      <th>year</th>\n",
       "      <th>uniqueid</th>\n",
       "      <th>location_type</th>\n",
       "      <th>cellphone_access</th>\n",
       "      <th>household_size</th>\n",
       "      <th>age_of_respondent</th>\n",
       "      <th>gender_of_respondent</th>\n",
       "      <th>relationship_with_head</th>\n",
       "      <th>marital_status</th>\n",
       "      <th>education_level</th>\n",
       "      <th>job_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Kenya</td>\n",
       "      <td>2018</td>\n",
       "      <td>uniqueid_6056</td>\n",
       "      <td>Urban</td>\n",
       "      <td>Yes</td>\n",
       "      <td>3</td>\n",
       "      <td>30</td>\n",
       "      <td>Male</td>\n",
       "      <td>Head of Household</td>\n",
       "      <td>Married/Living together</td>\n",
       "      <td>Secondary education</td>\n",
       "      <td>Formally employed Government</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Kenya</td>\n",
       "      <td>2018</td>\n",
       "      <td>uniqueid_6060</td>\n",
       "      <td>Urban</td>\n",
       "      <td>Yes</td>\n",
       "      <td>7</td>\n",
       "      <td>51</td>\n",
       "      <td>Male</td>\n",
       "      <td>Head of Household</td>\n",
       "      <td>Married/Living together</td>\n",
       "      <td>Vocational/Specialised training</td>\n",
       "      <td>Formally employed Private</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Kenya</td>\n",
       "      <td>2018</td>\n",
       "      <td>uniqueid_6065</td>\n",
       "      <td>Rural</td>\n",
       "      <td>No</td>\n",
       "      <td>3</td>\n",
       "      <td>77</td>\n",
       "      <td>Female</td>\n",
       "      <td>Parent</td>\n",
       "      <td>Married/Living together</td>\n",
       "      <td>No formal education</td>\n",
       "      <td>Remittance Dependent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Kenya</td>\n",
       "      <td>2018</td>\n",
       "      <td>uniqueid_6072</td>\n",
       "      <td>Rural</td>\n",
       "      <td>No</td>\n",
       "      <td>6</td>\n",
       "      <td>39</td>\n",
       "      <td>Female</td>\n",
       "      <td>Head of Household</td>\n",
       "      <td>Married/Living together</td>\n",
       "      <td>Primary education</td>\n",
       "      <td>Remittance Dependent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Kenya</td>\n",
       "      <td>2018</td>\n",
       "      <td>uniqueid_6073</td>\n",
       "      <td>Urban</td>\n",
       "      <td>No</td>\n",
       "      <td>3</td>\n",
       "      <td>16</td>\n",
       "      <td>Male</td>\n",
       "      <td>Child</td>\n",
       "      <td>Single/Never Married</td>\n",
       "      <td>Secondary education</td>\n",
       "      <td>Remittance Dependent</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  country  year       uniqueid location_type cellphone_access  household_size  \\\n",
       "0   Kenya  2018  uniqueid_6056         Urban              Yes               3   \n",
       "1   Kenya  2018  uniqueid_6060         Urban              Yes               7   \n",
       "2   Kenya  2018  uniqueid_6065         Rural               No               3   \n",
       "3   Kenya  2018  uniqueid_6072         Rural               No               6   \n",
       "4   Kenya  2018  uniqueid_6073         Urban               No               3   \n",
       "\n",
       "   age_of_respondent gender_of_respondent relationship_with_head  \\\n",
       "0                 30                 Male      Head of Household   \n",
       "1                 51                 Male      Head of Household   \n",
       "2                 77               Female                 Parent   \n",
       "3                 39               Female      Head of Household   \n",
       "4                 16                 Male                  Child   \n",
       "\n",
       "            marital_status                  education_level  \\\n",
       "0  Married/Living together              Secondary education   \n",
       "1  Married/Living together  Vocational/Specialised training   \n",
       "2  Married/Living together              No formal education   \n",
       "3  Married/Living together                Primary education   \n",
       "4     Single/Never Married              Secondary education   \n",
       "\n",
       "                       job_type  \n",
       "0  Formally employed Government  \n",
       "1     Formally employed Private  \n",
       "2          Remittance Dependent  \n",
       "3          Remittance Dependent  \n",
       "4          Remittance Dependent  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f946cc8b-1329-4024-bf18-7cd18271e6e2",
   "metadata": {},
   "source": [
    "# Explolatory Data Analysis\n",
    "*This is the process of finding some insights from you dataset before create predictive models.*\n",
    "\n",
    "Note: This is important steps in your Data science workflow."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6e9a2beb-ff5c-419a-8ec2-18cd9ffe53ff",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 23524 entries, 0 to 23523\n",
      "Data columns (total 13 columns):\n",
      " #   Column                  Non-Null Count  Dtype \n",
      "---  ------                  --------------  ----- \n",
      " 0   country                 23524 non-null  object\n",
      " 1   year                    23524 non-null  int64 \n",
      " 2   uniqueid                23524 non-null  object\n",
      " 3   bank_account            23524 non-null  object\n",
      " 4   location_type           23524 non-null  object\n",
      " 5   cellphone_access        23524 non-null  object\n",
      " 6   household_size          23524 non-null  int64 \n",
      " 7   age_of_respondent       23524 non-null  int64 \n",
      " 8   gender_of_respondent    23524 non-null  object\n",
      " 9   relationship_with_head  23524 non-null  object\n",
      " 10  marital_status          23524 non-null  object\n",
      " 11  education_level         23524 non-null  object\n",
      " 12  job_type                23524 non-null  object\n",
      "dtypes: int64(3), object(10)\n",
      "memory usage: 2.3+ MB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d7f20b6c-50eb-430e-876e-3d496013e490",
   "metadata": {},
   "source": [
    "## Let see the statistical overview of our dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "25aefcce-ab5f-4f59-90ba-762107e6d28b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>year</th>\n",
       "      <th>household_size</th>\n",
       "      <th>age_of_respondent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>23524.000000</td>\n",
       "      <td>23524.000000</td>\n",
       "      <td>23524.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2016.975939</td>\n",
       "      <td>3.797483</td>\n",
       "      <td>38.805220</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.847371</td>\n",
       "      <td>2.227613</td>\n",
       "      <td>16.520569</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>2016.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>16.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2016.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>26.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2017.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>35.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2018.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>49.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2018.000000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>100.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               year  household_size  age_of_respondent\n",
       "count  23524.000000    23524.000000       23524.000000\n",
       "mean    2016.975939        3.797483          38.805220\n",
       "std        0.847371        2.227613          16.520569\n",
       "min     2016.000000        1.000000          16.000000\n",
       "25%     2016.000000        2.000000          26.000000\n",
       "50%     2017.000000        3.000000          35.000000\n",
       "75%     2018.000000        5.000000          49.000000\n",
       "max     2018.000000       21.000000         100.000000"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# describe will show statistical info\n",
    "train.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ee90f807-f43a-4abf-a9b8-fd91b6f22697",
   "metadata": {},
   "source": [
    "From the above cell we can see that most of our features are categorical because ony 3 columns are numerical that's why it shows only those 3 with the mean, count, standard deviation also the minimum value of each columns the maximum value of each columns along with the interquartile range"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e0155400-5c43-4df3-9170-e701412f885b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 23524 entries, 0 to 23523\n",
      "Data columns (total 13 columns):\n",
      " #   Column                  Non-Null Count  Dtype \n",
      "---  ------                  --------------  ----- \n",
      " 0   country                 23524 non-null  object\n",
      " 1   year                    23524 non-null  int64 \n",
      " 2   uniqueid                23524 non-null  object\n",
      " 3   bank_account            23524 non-null  object\n",
      " 4   location_type           23524 non-null  object\n",
      " 5   cellphone_access        23524 non-null  object\n",
      " 6   household_size          23524 non-null  int64 \n",
      " 7   age_of_respondent       23524 non-null  int64 \n",
      " 8   gender_of_respondent    23524 non-null  object\n",
      " 9   relationship_with_head  23524 non-null  object\n",
      " 10  marital_status          23524 non-null  object\n",
      " 11  education_level         23524 non-null  object\n",
      " 12  job_type                23524 non-null  object\n",
      "dtypes: int64(3), object(10)\n",
      "memory usage: 2.3+ MB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b03c78ad-344b-454f-85d3-0c36bc87248c",
   "metadata": {},
   "source": [
    "From this info method we got to know more about our data it first show us the number of non null count als the datatype of each columns along with the total number of each datatypes we have. It shows here that we have 3 features with *int* dataypte and 10 *objects* datatype also it tell us about the size of the file we have which is in our case 2.3MB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d2166a6f-4288-4cd9-92f2-243dc1e16d8e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(23524, 13)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# to show the shape of the data\n",
    "train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "1e8d97c5-a551-42ef-95f2-7e3140973172",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2016    8735\n",
       "2018    8169\n",
       "2017    6620\n",
       "Name: year, dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.year.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ace16cb-1349-484f-88d5-5ee96a3816c1",
   "metadata": {},
   "source": [
    "### Target Distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "311bd0ca-7244-42c1-a3bb-53a4218b8c84",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.title(\"Unbalance classes\")\n",
    "sns.countplot(y=\"bank_account\", data=train)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9ea5d7e0-6e4a-4fd1-90c7-e3cc7cef40e5",
   "metadata": {},
   "source": [
    "From the above cell we can see that we have unbalanced data basically the number of No is much higher than the number of yes which can lead to poor model performence sometimes. In this can we've about 2500 yes and 20000 No which gives us a big difference later on we will what we can do for this ."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "efd705fe-273c-4fc2-8747-2667f33aa62c",
   "metadata": {},
   "source": [
    "### Let's see missing data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "387e76c4-dd86-4e85-aabd-cb0f64b458fb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1800x720 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import missingno as mn\n",
    "\n",
    "mn.matrix(train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31e05354-01d9-4c1a-96a5-a3c1abcb9bde",
   "metadata": {},
   "source": [
    "It shows that we don't have any missing values which is good"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3313a1f3-c73e-486e-ab89-ce1dacecff10",
   "metadata": {},
   "source": [
    "### Let's see the disctribution of the people with cellphone based on gender."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "6d89982f-667d-4da6-a102-4ada7a5eee0c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 479.75x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.catplot(x=\"cellphone_access\", data=train, kind=\"count\", hue=\"gender_of_respondent\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "efeca5a7-c772-4938-8372-1b8bee4bb34e",
   "metadata": {},
   "source": [
    "This shows that number of male having cellphones is higher than the numbero female in this case."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f2f58cef-0524-481a-8cb6-afb0bbc1e61d",
   "metadata": {},
   "source": [
    "## Let's see the distribution of age"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "acc49e47-b963-47e3-9589-4242c33bb232",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='age_of_respondent', ylabel='Density'>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(train.age_of_respondent)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3f02426c-d19d-427b-a787-8014900f8675",
   "metadata": {},
   "source": [
    "This distribution make sense because we have age range from 16 years old to 100 year"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "0cc5c995-adc5-4388-9911-ab9360ce5052",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Distribution of the gender\n",
    "sns.countplot(train.gender_of_respondent, hue=\"bank_account\", data=train)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a6bde4ef-5417-44df-9f8b-cd8b5ddd3065",
   "metadata": {},
   "source": [
    "we can see that the number of female that have bank account is higher than the number of male with a bank account. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "c011b253-3fb0-4674-846a-6895be3835f4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# distribution of job type\n",
    "plt.figure(figsize=(15, 7))\n",
    "sns.countplot(train.job_type, orient=\"h\", hue=\"bank_account\", data=train)\n",
    "labels = [\n",
    "    \"Self employed\",\n",
    "    \"Government Dependent\",\n",
    "    \"Formally employed Private\",\n",
    "    \"Informally employed\",\n",
    "    \"Formally employed Government\",\n",
    "    \"Farming and Fishing\",\n",
    "    \"Remittance Dependent\",\n",
    "    \"Other Income\",\n",
    "    \"Dont Know/Refuse to answer\",\n",
    "    \"No Income\",\n",
    "]\n",
    "ax = plt.gca()\n",
    "ax.set_xticklabels(labels=labels, rotation=70);"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0dfbf759-16eb-47c8-8bb1-3864963bb4cb",
   "metadata": {},
   "source": [
    "we can see from the above graph the the people who are self employed and farming and fishing are those who are more likely to have bank account as compare to the those who work for the Government or other income. \n",
    "We can notice also those who don't have no Income and does who reuse to answer don't have high chance of having bank account."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9abb468-32ea-47be-9698-14dcf758352d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='location_type', ylabel='count'>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Distribution of the location based on account\n",
    "sns.countplot(train.location_type, hue=\"bank_account\", data=train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71a4ca40-a079-451c-b949-0ecde4931621",
   "metadata": {
    "tags": []
   },
   "source": [
    "We can see that people in Urban area is have more chance to have bank_account than those who are in Rural area although we can see also the number people in Rural area is higher."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "7b7a9feb-2662-4d08-9730-fcadea407ab3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='household_size', ylabel='count'>"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Distirbution of the household_size\n",
    "sns.countplot(train.household_size, hue=\"bank_account\", data=train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b98c1d1-c5ee-4e39-83c1-92c166a588ee",
   "metadata": {},
   "source": [
    "## How many people have cellphone"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "1fc32588-7913-4a2c-b6a2-3c88fe0a7bbc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "17454"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.cellphone_access.value_counts()[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2353aafb-3d49-4f6b-bfdc-25fd48bbb9ea",
   "metadata": {},
   "source": [
    "we can see that the number of people who have cellphone access is 17454 which is more than the half which make more sense in this case"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "636107a5-a82a-4bc1-ad7a-faef955c70ac",
   "metadata": {},
   "source": [
    "### How many types of education do the dataset has?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "a5cb5c13-4042-413c-96b9-3b8b89ae0db4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Secondary education', 'No formal education',\n",
       "       'Vocational/Specialised training', 'Primary education',\n",
       "       'Tertiary education', 'Other/Dont know/RTA'], dtype=object)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.education_level.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "4679b658-6782-416f-87d2-6e9d827ef36c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(train.education_level, hue=\"bank_account\", data=train)\n",
    "labels = [\n",
    "    \"Secondary education\",\n",
    "    \"No formal education\",\n",
    "    \"Vocational/Specialised training\",\n",
    "    \"Primary education\",\n",
    "    \"Tertiary education\",\n",
    "    \"Other/Dont know/RTA\",\n",
    "]\n",
    "ax = plt.gca()\n",
    "ax.set_xticklabels(labels=labels, rotation=50);"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc5cb797-52ab-42cd-955d-b300d171bca2",
   "metadata": {},
   "source": [
    "we can see that the vocational/ specialised training is the majority in this case and we have few people with No formal education"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "a75da0e6-bb56-4fd5-bf2c-b71c75d5f522",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Married/Living together    10749\n",
       "Single/Never Married        7983\n",
       "Widowed                     2708\n",
       "Divorced/Seperated          2076\n",
       "Dont know                      8\n",
       "Name: marital_status, dtype: int64"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.marital_status.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "375dda02-2de1-41a9-a377-b4c217cc9dd2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(train.marital_status, hue=\"bank_account\", data=train)\n",
    "labels = [\n",
    "    \"Married/Living together\",\n",
    "    \"Widowed\",\n",
    "    \"Single/Never Married\",\n",
    "    \"Divorced/Seperated\",\n",
    "    \"Dont know\",\n",
    "]\n",
    "ax = plt.gca()\n",
    "ax.set_xticklabels(labels=labels, rotation=50);"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea4bd304-8f9b-4a11-a9bf-e9bfdf096492",
   "metadata": {},
   "source": [
    "This shows that people who are married and living together are more likely to have a bank account as compare to ther slike single or divorced"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "d5e05536-080a-4dec-aad5-df271ae386c6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert target label to numerical Data\n",
    "le = LabelEncoder()\n",
    "train[\"bank_account\"] = le.fit_transform(train[\"bank_account\"])\n",
    "\n",
    "# Separate training features from target\n",
    "X_train = train.drop([\"bank_account\"], axis=1)\n",
    "y_train = train[\"bank_account\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "28bcb2dc-1b75-4e8c-9f6d-03181c97cd17",
   "metadata": {},
   "outputs": [],
   "source": [
    "train[\"country+location\"] = train[\"country\"] + train[\"location_type\"]\n",
    "train[\"location+cellphone_access\"] = train[\"location_type\"] + train[\"cellphone_access\"]\n",
    "train[\"gender+cellphone_access\"] = (\n",
    "    train[\"gender_of_respondent\"] + train[\"cellphone_access\"]\n",
    ")\n",
    "train[\"country+cellphone_access\"] = train[\"country\"] + train[\"cellphone_access\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "6b700ddd-265f-4b48-8940-d7f7b3174f12",
   "metadata": {},
   "outputs": [],
   "source": [
    "test[\"country+location\"] = test[\"country\"] + test[\"location_type\"]\n",
    "test[\"location+cellphone_access\"] = test[\"location_type\"] + test[\"cellphone_access\"]\n",
    "test[\"gender+cellphone_access\"] = (\n",
    "    test[\"gender_of_respondent\"] + test[\"cellphone_access\"]\n",
    ")\n",
    "test[\"country+cellphone_access\"] = test[\"country\"] + test[\"cellphone_access\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "71b2c91b-a401-4f36-8c6f-9ae4eeb695f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = train.drop([\"uniqueid\", \"year\"], 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "3163c57a-86fe-4b51-adbf-d7f053eacfe2",
   "metadata": {},
   "outputs": [],
   "source": [
    "col_test = test.uniqueid\n",
    "test = test.drop(\"uniqueid\", 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "86811650-d1a5-4370-a058-6e0ea0ed8d17",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country</th>\n",
       "      <th>year</th>\n",
       "      <th>location_type</th>\n",
       "      <th>cellphone_access</th>\n",
       "      <th>household_size</th>\n",
       "      <th>age_of_respondent</th>\n",
       "      <th>gender_of_respondent</th>\n",
       "      <th>relationship_with_head</th>\n",
       "      <th>marital_status</th>\n",
       "      <th>education_level</th>\n",
       "      <th>job_type</th>\n",
       "      <th>country+location</th>\n",
       "      <th>location+cellphone_access</th>\n",
       "      <th>gender+cellphone_access</th>\n",
       "      <th>country+cellphone_access</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Kenya</td>\n",
       "      <td>2018</td>\n",
       "      <td>Urban</td>\n",
       "      <td>Yes</td>\n",
       "      <td>3</td>\n",
       "      <td>30</td>\n",
       "      <td>Male</td>\n",
       "      <td>Head of Household</td>\n",
       "      <td>Married/Living together</td>\n",
       "      <td>Secondary education</td>\n",
       "      <td>Formally employed Government</td>\n",
       "      <td>KenyaUrban</td>\n",
       "      <td>UrbanYes</td>\n",
       "      <td>MaleYes</td>\n",
       "      <td>KenyaYes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Kenya</td>\n",
       "      <td>2018</td>\n",
       "      <td>Urban</td>\n",
       "      <td>Yes</td>\n",
       "      <td>7</td>\n",
       "      <td>51</td>\n",
       "      <td>Male</td>\n",
       "      <td>Head of Household</td>\n",
       "      <td>Married/Living together</td>\n",
       "      <td>Vocational/Specialised training</td>\n",
       "      <td>Formally employed Private</td>\n",
       "      <td>KenyaUrban</td>\n",
       "      <td>UrbanYes</td>\n",
       "      <td>MaleYes</td>\n",
       "      <td>KenyaYes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Kenya</td>\n",
       "      <td>2018</td>\n",
       "      <td>Rural</td>\n",
       "      <td>No</td>\n",
       "      <td>3</td>\n",
       "      <td>77</td>\n",
       "      <td>Female</td>\n",
       "      <td>Parent</td>\n",
       "      <td>Married/Living together</td>\n",
       "      <td>No formal education</td>\n",
       "      <td>Remittance Dependent</td>\n",
       "      <td>KenyaRural</td>\n",
       "      <td>RuralNo</td>\n",
       "      <td>FemaleNo</td>\n",
       "      <td>KenyaNo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Kenya</td>\n",
       "      <td>2018</td>\n",
       "      <td>Rural</td>\n",
       "      <td>No</td>\n",
       "      <td>6</td>\n",
       "      <td>39</td>\n",
       "      <td>Female</td>\n",
       "      <td>Head of Household</td>\n",
       "      <td>Married/Living together</td>\n",
       "      <td>Primary education</td>\n",
       "      <td>Remittance Dependent</td>\n",
       "      <td>KenyaRural</td>\n",
       "      <td>RuralNo</td>\n",
       "      <td>FemaleNo</td>\n",
       "      <td>KenyaNo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Kenya</td>\n",
       "      <td>2018</td>\n",
       "      <td>Urban</td>\n",
       "      <td>No</td>\n",
       "      <td>3</td>\n",
       "      <td>16</td>\n",
       "      <td>Male</td>\n",
       "      <td>Child</td>\n",
       "      <td>Single/Never Married</td>\n",
       "      <td>Secondary education</td>\n",
       "      <td>Remittance Dependent</td>\n",
       "      <td>KenyaUrban</td>\n",
       "      <td>UrbanNo</td>\n",
       "      <td>MaleNo</td>\n",
       "      <td>KenyaNo</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  country  year location_type cellphone_access  household_size  \\\n",
       "0   Kenya  2018         Urban              Yes               3   \n",
       "1   Kenya  2018         Urban              Yes               7   \n",
       "2   Kenya  2018         Rural               No               3   \n",
       "3   Kenya  2018         Rural               No               6   \n",
       "4   Kenya  2018         Urban               No               3   \n",
       "\n",
       "   age_of_respondent gender_of_respondent relationship_with_head  \\\n",
       "0                 30                 Male      Head of Household   \n",
       "1                 51                 Male      Head of Household   \n",
       "2                 77               Female                 Parent   \n",
       "3                 39               Female      Head of Household   \n",
       "4                 16                 Male                  Child   \n",
       "\n",
       "            marital_status                  education_level  \\\n",
       "0  Married/Living together              Secondary education   \n",
       "1  Married/Living together  Vocational/Specialised training   \n",
       "2  Married/Living together              No formal education   \n",
       "3  Married/Living together                Primary education   \n",
       "4     Single/Never Married              Secondary education   \n",
       "\n",
       "                       job_type country+location location+cellphone_access  \\\n",
       "0  Formally employed Government       KenyaUrban                  UrbanYes   \n",
       "1     Formally employed Private       KenyaUrban                  UrbanYes   \n",
       "2          Remittance Dependent       KenyaRural                   RuralNo   \n",
       "3          Remittance Dependent       KenyaRural                   RuralNo   \n",
       "4          Remittance Dependent       KenyaUrban                   UrbanNo   \n",
       "\n",
       "  gender+cellphone_access country+cellphone_access  \n",
       "0                 MaleYes                 KenyaYes  \n",
       "1                 MaleYes                 KenyaYes  \n",
       "2                FemaleNo                  KenyaNo  \n",
       "3                FemaleNo                  KenyaNo  \n",
       "4                  MaleNo                  KenyaNo  "
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "7600e5c0-9504-4bff-ae0f-950255e0fed7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country</th>\n",
       "      <th>bank_account</th>\n",
       "      <th>location_type</th>\n",
       "      <th>cellphone_access</th>\n",
       "      <th>household_size</th>\n",
       "      <th>age_of_respondent</th>\n",
       "      <th>gender_of_respondent</th>\n",
       "      <th>relationship_with_head</th>\n",
       "      <th>marital_status</th>\n",
       "      <th>education_level</th>\n",
       "      <th>job_type</th>\n",
       "      <th>country+location</th>\n",
       "      <th>location+cellphone_access</th>\n",
       "      <th>gender+cellphone_access</th>\n",
       "      <th>country+cellphone_access</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Kenya</td>\n",
       "      <td>1</td>\n",
       "      <td>Rural</td>\n",
       "      <td>Yes</td>\n",
       "      <td>3</td>\n",
       "      <td>24</td>\n",
       "      <td>Female</td>\n",
       "      <td>Spouse</td>\n",
       "      <td>Married/Living together</td>\n",
       "      <td>Secondary education</td>\n",
       "      <td>Self employed</td>\n",
       "      <td>KenyaRural</td>\n",
       "      <td>RuralYes</td>\n",
       "      <td>FemaleYes</td>\n",
       "      <td>KenyaYes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Kenya</td>\n",
       "      <td>0</td>\n",
       "      <td>Rural</td>\n",
       "      <td>No</td>\n",
       "      <td>5</td>\n",
       "      <td>70</td>\n",
       "      <td>Female</td>\n",
       "      <td>Head of Household</td>\n",
       "      <td>Widowed</td>\n",
       "      <td>No formal education</td>\n",
       "      <td>Government Dependent</td>\n",
       "      <td>KenyaRural</td>\n",
       "      <td>RuralNo</td>\n",
       "      <td>FemaleNo</td>\n",
       "      <td>KenyaNo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Kenya</td>\n",
       "      <td>1</td>\n",
       "      <td>Urban</td>\n",
       "      <td>Yes</td>\n",
       "      <td>5</td>\n",
       "      <td>26</td>\n",
       "      <td>Male</td>\n",
       "      <td>Other relative</td>\n",
       "      <td>Single/Never Married</td>\n",
       "      <td>Vocational/Specialised training</td>\n",
       "      <td>Self employed</td>\n",
       "      <td>KenyaUrban</td>\n",
       "      <td>UrbanYes</td>\n",
       "      <td>MaleYes</td>\n",
       "      <td>KenyaYes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Kenya</td>\n",
       "      <td>0</td>\n",
       "      <td>Rural</td>\n",
       "      <td>Yes</td>\n",
       "      <td>5</td>\n",
       "      <td>34</td>\n",
       "      <td>Female</td>\n",
       "      <td>Head of Household</td>\n",
       "      <td>Married/Living together</td>\n",
       "      <td>Primary education</td>\n",
       "      <td>Formally employed Private</td>\n",
       "      <td>KenyaRural</td>\n",
       "      <td>RuralYes</td>\n",
       "      <td>FemaleYes</td>\n",
       "      <td>KenyaYes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Kenya</td>\n",
       "      <td>0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>No</td>\n",
       "      <td>8</td>\n",
       "      <td>26</td>\n",
       "      <td>Male</td>\n",
       "      <td>Child</td>\n",
       "      <td>Single/Never Married</td>\n",
       "      <td>Primary education</td>\n",
       "      <td>Informally employed</td>\n",
       "      <td>KenyaUrban</td>\n",
       "      <td>UrbanNo</td>\n",
       "      <td>MaleNo</td>\n",
       "      <td>KenyaNo</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  country  bank_account location_type cellphone_access  household_size  \\\n",
       "0   Kenya             1         Rural              Yes               3   \n",
       "1   Kenya             0         Rural               No               5   \n",
       "2   Kenya             1         Urban              Yes               5   \n",
       "3   Kenya             0         Rural              Yes               5   \n",
       "4   Kenya             0         Urban               No               8   \n",
       "\n",
       "   age_of_respondent gender_of_respondent relationship_with_head  \\\n",
       "0                 24               Female                 Spouse   \n",
       "1                 70               Female      Head of Household   \n",
       "2                 26                 Male         Other relative   \n",
       "3                 34               Female      Head of Household   \n",
       "4                 26                 Male                  Child   \n",
       "\n",
       "            marital_status                  education_level  \\\n",
       "0  Married/Living together              Secondary education   \n",
       "1                  Widowed              No formal education   \n",
       "2     Single/Never Married  Vocational/Specialised training   \n",
       "3  Married/Living together                Primary education   \n",
       "4     Single/Never Married                Primary education   \n",
       "\n",
       "                    job_type country+location location+cellphone_access  \\\n",
       "0              Self employed       KenyaRural                  RuralYes   \n",
       "1       Government Dependent       KenyaRural                   RuralNo   \n",
       "2              Self employed       KenyaUrban                  UrbanYes   \n",
       "3  Formally employed Private       KenyaRural                  RuralYes   \n",
       "4        Informally employed       KenyaUrban                   UrbanNo   \n",
       "\n",
       "  gender+cellphone_access country+cellphone_access  \n",
       "0               FemaleYes                 KenyaYes  \n",
       "1                FemaleNo                  KenyaNo  \n",
       "2                 MaleYes                 KenyaYes  \n",
       "3               FemaleYes                 KenyaYes  \n",
       "4                  MaleNo                  KenyaNo  "
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "f80bb42d-15e7-452b-8e8b-ded6935b652a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>bank_account</th>\n",
       "      <th>household_size</th>\n",
       "      <th>age_of_respondent</th>\n",
       "      <th>country_Rwanda</th>\n",
       "      <th>country_Tanzania</th>\n",
       "      <th>country_Uganda</th>\n",
       "      <th>location_type_Urban</th>\n",
       "      <th>cellphone_access_Yes</th>\n",
       "      <th>gender_of_respondent_Male</th>\n",
       "      <th>relationship_with_head_Head of Household</th>\n",
       "      <th>...</th>\n",
       "      <th>gender+cellphone_access_FemaleYes</th>\n",
       "      <th>gender+cellphone_access_MaleNo</th>\n",
       "      <th>gender+cellphone_access_MaleYes</th>\n",
       "      <th>country+cellphone_access_KenyaYes</th>\n",
       "      <th>country+cellphone_access_RwandaNo</th>\n",
       "      <th>country+cellphone_access_RwandaYes</th>\n",
       "      <th>country+cellphone_access_TanzaniaNo</th>\n",
       "      <th>country+cellphone_access_TanzaniaYes</th>\n",
       "      <th>country+cellphone_access_UgandaNo</th>\n",
       "      <th>country+cellphone_access_UgandaYes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>24</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>70</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>34</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 52 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   bank_account  household_size  age_of_respondent  country_Rwanda  \\\n",
       "0             1               3                 24               0   \n",
       "1             0               5                 70               0   \n",
       "2             1               5                 26               0   \n",
       "3             0               5                 34               0   \n",
       "4             0               8                 26               0   \n",
       "\n",
       "   country_Tanzania  country_Uganda  location_type_Urban  \\\n",
       "0                 0               0                    0   \n",
       "1                 0               0                    0   \n",
       "2                 0               0                    1   \n",
       "3                 0               0                    0   \n",
       "4                 0               0                    1   \n",
       "\n",
       "   cellphone_access_Yes  gender_of_respondent_Male  \\\n",
       "0                     1                          0   \n",
       "1                     0                          0   \n",
       "2                     1                          1   \n",
       "3                     1                          0   \n",
       "4                     0                          1   \n",
       "\n",
       "   relationship_with_head_Head of Household  ...  \\\n",
       "0                                         0  ...   \n",
       "1                                         1  ...   \n",
       "2                                         0  ...   \n",
       "3                                         1  ...   \n",
       "4                                         0  ...   \n",
       "\n",
       "   gender+cellphone_access_FemaleYes  gender+cellphone_access_MaleNo  \\\n",
       "0                                  1                               0   \n",
       "1                                  0                               0   \n",
       "2                                  0                               0   \n",
       "3                                  1                               0   \n",
       "4                                  0                               1   \n",
       "\n",
       "   gender+cellphone_access_MaleYes  country+cellphone_access_KenyaYes  \\\n",
       "0                                0                                  1   \n",
       "1                                0                                  0   \n",
       "2                                1                                  1   \n",
       "3                                0                                  1   \n",
       "4                                0                                  0   \n",
       "\n",
       "   country+cellphone_access_RwandaNo  country+cellphone_access_RwandaYes  \\\n",
       "0                                  0                                   0   \n",
       "1                                  0                                   0   \n",
       "2                                  0                                   0   \n",
       "3                                  0                                   0   \n",
       "4                                  0                                   0   \n",
       "\n",
       "   country+cellphone_access_TanzaniaNo  country+cellphone_access_TanzaniaYes  \\\n",
       "0                                    0                                     0   \n",
       "1                                    0                                     0   \n",
       "2                                    0                                     0   \n",
       "3                                    0                                     0   \n",
       "4                                    0                                     0   \n",
       "\n",
       "   country+cellphone_access_UgandaNo  country+cellphone_access_UgandaYes  \n",
       "0                                  0                                   0  \n",
       "1                                  0                                   0  \n",
       "2                                  0                                   0  \n",
       "3                                  0                                   0  \n",
       "4                                  0                                   0  \n",
       "\n",
       "[5 rows x 52 columns]"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.get_dummies(df, drop_first=True)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "f4e99345-4cc7-4296-8bb4-b192a4a8af5b",
   "metadata": {},
   "outputs": [],
   "source": [
    "test = pd.get_dummies(test, drop_first=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "1db9b27f-166c-4af2-901b-053db61510b3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((23524, 52), (10086, 52))"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape, test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "9c328fa6-199a-4b4e-8284-fd9a7a9fc57f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "bank_account                                       1.000000\n",
       "household_size                                    -0.028326\n",
       "age_of_respondent                                  0.019429\n",
       "country_Rwanda                                    -0.057378\n",
       "country_Tanzania                                  -0.088345\n",
       "country_Uganda                                    -0.049200\n",
       "location_type_Urban                                0.087288\n",
       "cellphone_access_Yes                               0.209669\n",
       "gender_of_respondent_Male                          0.117234\n",
       "relationship_with_head_Head of Household           0.114506\n",
       "relationship_with_head_Other non-relatives        -0.009218\n",
       "relationship_with_head_Other relative             -0.020639\n",
       "relationship_with_head_Parent                     -0.051197\n",
       "relationship_with_head_Spouse                     -0.060884\n",
       "marital_status_Dont know                           0.005791\n",
       "marital_status_Married/Living together             0.086518\n",
       "marital_status_Single/Never Married               -0.040771\n",
       "marital_status_Widowed                            -0.052565\n",
       "education_level_Other/Dont know/RTA                0.019255\n",
       "education_level_Primary education                 -0.173702\n",
       "education_level_Secondary education                0.123702\n",
       "education_level_Tertiary education                 0.241958\n",
       "education_level_Vocational/Specialised training    0.232187\n",
       "job_type_Farming and Fishing                      -0.037986\n",
       "job_type_Formally employed Government              0.235900\n",
       "job_type_Formally employed Private                 0.249478\n",
       "job_type_Government Dependent                      0.018255\n",
       "job_type_Informally employed                      -0.098456\n",
       "job_type_No Income                                -0.057121\n",
       "job_type_Other Income                              0.025663\n",
       "job_type_Remittance Dependent                     -0.045701\n",
       "job_type_Self employed                            -0.015978\n",
       "country+location_KenyaUrban                        0.217759\n",
       "country+location_RwandaRural                      -0.114300\n",
       "country+location_RwandaUrban                       0.113648\n",
       "country+location_TanzaniaRural                     0.055189\n",
       "country+location_TanzaniaUrban                    -0.134951\n",
       "country+location_UgandaRural                      -0.074008\n",
       "country+location_UgandaUrban                       0.026128\n",
       "location+cellphone_access_RuralYes                 0.010144\n",
       "location+cellphone_access_UrbanNo                 -0.136241\n",
       "location+cellphone_access_UrbanYes                 0.194925\n",
       "gender+cellphone_access_FemaleYes                  0.013474\n",
       "gender+cellphone_access_MaleNo                    -0.099034\n",
       "gender+cellphone_access_MaleYes                    0.181505\n",
       "country+cellphone_access_KenyaYes                  0.238445\n",
       "country+cellphone_access_RwandaNo                 -0.095569\n",
       "country+cellphone_access_RwandaYes                -0.009689\n",
       "country+cellphone_access_TanzaniaNo               -0.139647\n",
       "country+cellphone_access_TanzaniaYes               0.012099\n",
       "country+cellphone_access_UgandaNo                 -0.060003\n",
       "country+cellphone_access_UgandaYes                -0.017768\n",
       "Name: bank_account, dtype: float64"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.corr()[\"bank_account\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "ce6238e7-3931-482b-a40c-adca0b1bee48",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:ylabel='Frequency'>"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.age_of_respondent.plot(kind=\"hist\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "eee452c9-174a-4a03-92d8-9575a35aaa7e",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df.drop([\"bank_account\"], 1)\n",
    "y = df.bank_account.values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "7a3fe34c-bc7d-447a-8a12-7260a12fda77",
   "metadata": {},
   "outputs": [],
   "source": [
    "from imblearn.over_sampling import SMOTE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "a23e30c2-7311-4010-8315-e0aa53e794dd",
   "metadata": {},
   "outputs": [],
   "source": [
    "oversample = SMOTE()\n",
    "X, y = oversample.fit_resample(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "4522956b-a330-4fdd-b952-96aaee228314",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:title={'center':'Balanced classes'}, ylabel='count'>"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "oversample = SMOTE()\n",
    "# Oversampling the target data\n",
    "X, y = oversample.fit_resample(X, y)\n",
    "plt.title(\"Balanced classes\")\n",
    "sns.countplot(y)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb9eddc9-79be-4e01-9e00-9a3b06b8ca61",
   "metadata": {},
   "source": [
    "## Trying Different Algorithms from Sklearn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "f8103cc0-6e6e-4ed0-b374-b46c58a1a698",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    X, y, random_state=seed, test_size=0.1, stratify=y\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "eff2c7f3-78cd-4d2a-b366-930e7057cfe3",
   "metadata": {},
   "outputs": [],
   "source": [
    "scaler = StandardScaler()\n",
    "X_train = scaler.fit_transform(X_train)\n",
    "X_test = scaler.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "d6951b28-2809-4265-98d6-72df02ad8fdf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train XGB\n",
      "[16:31:53] WARNING: ../src/learner.cc:1115: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'binary:logistic' was changed from 'error' to 'logloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "[16:31:57] WARNING: ../src/learner.cc:1115: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'binary:logistic' was changed from 'error' to 'logloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "[16:32:01] WARNING: ../src/learner.cc:1115: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'binary:logistic' was changed from 'error' to 'logloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "[16:32:07] WARNING: ../src/learner.cc:1115: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'binary:logistic' was changed from 'error' to 'logloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "[16:32:12] WARNING: ../src/learner.cc:1115: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'binary:logistic' was changed from 'error' to 'logloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "[16:32:16] WARNING: ../src/learner.cc:1115: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'binary:logistic' was changed from 'error' to 'logloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "[16:32:21] WARNING: ../src/learner.cc:1115: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'binary:logistic' was changed from 'error' to 'logloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "[16:32:25] WARNING: ../src/learner.cc:1115: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'binary:logistic' was changed from 'error' to 'logloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "[16:32:31] WARNING: ../src/learner.cc:1115: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'binary:logistic' was changed from 'error' to 'logloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "[16:32:37] WARNING: ../src/learner.cc:1115: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'binary:logistic' was changed from 'error' to 'logloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "List of scores for XGB: [0.89198218 0.87997772 0.88026608 0.88033473 0.88209121 0.8721551\n",
      " 0.89422272 0.8917057  0.8871552  0.8808204 ]\n",
      "The mean score for XGB: 0.8840711038327693\n",
      "-------------The End------------------\n",
      "Train KNN\n",
      "List of scores for KNN: [0.88653637 0.88200109 0.88297583 0.88214383 0.88002186 0.88207934\n",
      " 0.88100437 0.87923497 0.88280394 0.87117904]\n",
      "The mean score for KNN: 0.8809980658813863\n",
      "-------------The End------------------\n",
      "Train RF\n",
      "List of scores for RF: [0.89747076 0.90255284 0.90218579 0.90412456 0.89847162 0.90357826\n",
      " 0.89512394 0.89526387 0.90273639 0.89445342]\n",
      "The mean score for RF: 0.8995961446605358\n",
      "-------------The End------------------\n",
      "Train GB\n",
      "List of scores for GB: [0.84315353 0.83685969 0.83818589 0.83749307 0.85167464 0.82951369\n",
      " 0.84651679 0.84340737 0.84848485 0.84269349]\n",
      "The mean score for GB: 0.8417983004091484\n",
      "-------------The End------------------\n",
      "Train DTC\n",
      "List of scores for DTC: [0.87001357 0.87769    0.88846469 0.88635747 0.88762215 0.89612487\n",
      " 0.88603444 0.88028361 0.88556673 0.87653312]\n",
      "The mean score for DTC: 0.8834690635356166\n",
      "-------------The End------------------\n",
      "Train HGB\n",
      "List of scores for HGB: [0.87592068 0.86922431 0.88388889 0.86477273 0.87612108 0.87587954\n",
      " 0.87562744 0.87152094 0.87290034 0.87639821]\n",
      "The mean score for HGB: 0.8742254148514498\n",
      "-------------The End------------------\n",
      "Train ADB\n",
      "List of scores for ADB: [0.83039648 0.83159627 0.82922779 0.83675736 0.83970305 0.82656422\n",
      " 0.8368247  0.83860324 0.82900137 0.83132867]\n",
      "The mean score for ADB: 0.8330003138887678\n",
      "-------------The End------------------\n"
     ]
    }
   ],
   "source": [
    "kf = StratifiedKFold(n_splits=10, shuffle=True)\n",
    "models = {\n",
    "    \"XGB\": XGBClassifier(),\n",
    "    \"KNN\": KNeighborsClassifier(),\n",
    "    \"RF\": RandomForestClassifier(),\n",
    "    \"GB\": GradientBoostingClassifier(),\n",
    "    \"DTC\": DecisionTreeClassifier(),\n",
    "    \"HGB\": HistGradientBoostingClassifier(),\n",
    "    \"ADB\": AdaBoostClassifier(),\n",
    "}\n",
    "\n",
    "\n",
    "for model_name, model in models.items():\n",
    "    print(\"Train {}\".format(model_name))\n",
    "    # cross_val_score for each classifier\n",
    "    scores = cross_val_score(model, X_train, y_train, cv=kf, scoring=\"f1\")\n",
    "\n",
    "    print(\"List of scores for {}: {}\".format(model_name, scores))\n",
    "    print(\"The mean score for {}: {}\".format(model_name, scores.mean()))\n",
    "    print(\"-------------The End------------------\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a62aa05f-abc4-4860-8488-2b156ab3f3e9",
   "metadata": {},
   "source": [
    "### XGBoost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "7220adfd-21db-4d70-ac16-530ed4ffb7e4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[16:35:54] WARNING: ../src/learner.cc:1115: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'binary:logistic' was changed from 'error' to 'logloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n"
     ]
    }
   ],
   "source": [
    "xgb = XGBClassifier(\n",
    "    n_estimators=200,\n",
    "    random_state=seed,\n",
    "    use_label_encoder=False,\n",
    ")\n",
    "xgb.fit(X_train, y_train)\n",
    "y_pred_xgb = xgb.predict(X_test)\n",
    "\n",
    "f1_xgb = f1_score(y_test, y_pred_xgb)\n",
    "precision_score_xgb = precision_score(y_test, y_pred_xgb)\n",
    "recall_xgb = recall_score(y_test, y_pred_xgb)\n",
    "accuracy_score_xgb = accuracy_score(y_test, y_pred_xgb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "478e5d84-7302-4132-95b5-622d7bf44849",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "XGBoost Accuracy of xgb: 0.9005688844917141\n",
      "precision of xgb: 0.9111223971559167\n",
      "recall of xgb: 0.8876793666501732\n",
      "f1 of xgb: 0.8992481203007519\n"
     ]
    }
   ],
   "source": [
    "print(f\"XGBoost Accuracy of xgb: {accuracy_score_xgb}\")\n",
    "print(f\"precision of xgb: {precision_score_xgb}\")\n",
    "print(f\"recall of xgb: {recall_xgb}\")\n",
    "print(f\"f1 of xgb: {f1_xgb}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eea30305-14f3-4dc6-af3a-979ccc25e145",
   "metadata": {},
   "source": [
    "### KNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "bd226667-9a6f-42a0-b92f-c85fb3ccb4fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "knn = KNeighborsClassifier()\n",
    "knn.fit(X_train, y_train)\n",
    "y_pred_knn = knn.predict(X_test)\n",
    "\n",
    "f1_knn = f1_score(y_test, y_pred_knn)\n",
    "precision_score_knn = precision_score(y_test, y_pred_knn)\n",
    "recall_knn = recall_score(y_test, y_pred_knn)\n",
    "accuracy_score_knn = accuracy_score(y_test, y_pred_knn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "587489f8-478c-497a-ac55-fcd5fe50f748",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy of knn: 0.8839970319069997\n",
      "precision of knn: 0.8796477495107632\n",
      "f1 of knn: 0.8846248462484625\n",
      "recall of knn: 0.8896585848589807\n"
     ]
    }
   ],
   "source": [
    "print(f\"Accuracy of knn: {accuracy_score_knn}\")\n",
    "print(f\"precision of knn: {precision_score_knn}\")\n",
    "print(f\"f1 of knn: {f1_knn}\")\n",
    "print(f\"recall of knn: {recall_knn}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f43f82a6-5a73-4615-8f44-42cf8f9aecb5",
   "metadata": {},
   "source": [
    "### Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "932159ea-f9d2-4c68-b2e6-5ecb8aebf94b",
   "metadata": {},
   "outputs": [],
   "source": [
    "rfc = RandomForestClassifier(\n",
    "    n_estimators=200,\n",
    "    random_state=seed,\n",
    ")\n",
    "rfc.fit(X_train, y_train)\n",
    "y_pred_rfc = rfc.predict(X_test)\n",
    "\n",
    "f1_rfc = f1_score(y_test, y_pred_rfc)\n",
    "precision_score_rfc = precision_score(y_test, y_pred_rfc)\n",
    "recall_rfc = recall_score(y_test, y_pred_rfc)\n",
    "accuracy_score_rfc = accuracy_score(y_test, y_pred_rfc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "44923fd6-1047-49f0-af49-22d6dc03b482",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy of rfc: 0.9035369774919614\n",
      "precision of rfc: 0.8972235752557234\n",
      "f1 of rfc: 0.9042709867452136\n",
      "recall of rfc: 0.9114299851558635\n"
     ]
    }
   ],
   "source": [
    "print(f\"Accuracy of rfc: {accuracy_score_rfc}\")\n",
    "print(f\"precision of rfc: {precision_score_rfc}\")\n",
    "print(f\"f1 of rfc: {f1_rfc}\")\n",
    "print(f\"recall of rfc: {recall_rfc}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "608ddc41-970e-45e4-89b4-f0ba82af9859",
   "metadata": {},
   "source": [
    "### Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "46b8b607-8b63-43a7-8774-85109ec8f351",
   "metadata": {},
   "outputs": [],
   "source": [
    "lg = LogisticRegression()\n",
    "lg.fit(X_train, y_train)\n",
    "y_pred_lg = lg.predict(X_test)\n",
    "\n",
    "f1_lg = f1_score(y_test, y_pred_lg)\n",
    "precision_score_lg = precision_score(y_test, y_pred_lg)\n",
    "recall_lg = recall_score(y_test, y_pred_lg)\n",
    "accuracy_score_lg = accuracy_score(y_test, y_pred_lg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "15939ac2-17da-4577-aa14-52d5b56b20b3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy of lg: 0.8585209003215434\n",
      "precision of lg: 0.8952536824877251\n",
      "f1 of lg: 0.8515827711468604\n",
      "recall of lg: 0.8119742701632855\n"
     ]
    }
   ],
   "source": [
    "print(f\"Accuracy of lg: {accuracy_score_lg}\")\n",
    "print(f\"precision of lg: {precision_score_lg}\")\n",
    "print(f\"f1 of lg: {f1_lg}\")\n",
    "print(f\"recall of lg: {recall_lg}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "931a4b69-5dd3-4ef3-8212-26c2cc67537f",
   "metadata": {},
   "source": [
    "# Gradient Boosting classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "10684a2a-b1e7-4da6-a43a-2378afe5e892",
   "metadata": {},
   "outputs": [],
   "source": [
    "gbc = GradientBoostingClassifier(n_estimators=200, random_state=42)\n",
    "gbc.fit(X_train, y_train)\n",
    "y_pred_gbc = gbc.predict(X_test)\n",
    "\n",
    "f1_gbc = f1_score(y_test, y_pred_gbc)\n",
    "precision_score_gbc = precision_score(y_test, y_pred_gbc)\n",
    "recall_gbc = recall_score(y_test, y_pred_gbc)\n",
    "accuracy_score_gbc = accuracy_score(y_test, y_pred_gbc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "e68f03c8-1eda-4573-afe9-6af084323ad0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy of gbc: 0.8624783576552065\n",
      "precision of gbc: 0.8881822999470058\n",
      "f1 of gbc: 0.8577277379733879\n",
      "recall of gbc: 0.8292924294903513\n"
     ]
    }
   ],
   "source": [
    "print(f\"Accuracy of gbc: {accuracy_score_gbc}\")\n",
    "print(f\"precision of gbc: {precision_score_gbc}\")\n",
    "print(f\"f1 of gbc: {f1_gbc}\")\n",
    "print(f\"recall of gbc: {recall_gbc}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1fa12aa7-8d86-4130-9f52-3e3c24e9c721",
   "metadata": {},
   "source": [
    "### Decision Tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "eae148bf-cfb9-423f-9d43-bd035a3a492e",
   "metadata": {},
   "outputs": [],
   "source": [
    "dt = DecisionTreeClassifier()\n",
    "dt.fit(X_train, y_train)\n",
    "y_pred_dt = dt.predict(X_test)\n",
    "\n",
    "f1_dt = f1_score(y_test, y_pred_dt)\n",
    "precision_score_dt = precision_score(y_test, y_pred_dt)\n",
    "recall_df = recall_score(y_test, y_pred_dt)\n",
    "accuracy_score_dt = accuracy_score(y_test, y_pred_dt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "9a2d7c0f-6d80-4b03-baa1-ebfa3d0f1d28",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy of dt: 0.8889438535740787\n",
      "precision of dt: 0.8800773694390716\n",
      "f1 of dt: 0.8901932012717046\n",
      "recall of df: 0.9005442850074221\n"
     ]
    }
   ],
   "source": [
    "print(f\"Accuracy of dt: {accuracy_score_dt}\")\n",
    "print(f\"precision of dt: {precision_score_dt}\")\n",
    "print(f\"f1 of dt: {f1_dt}\")\n",
    "print(f\"recall of df: {recall_df}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b91e729-12e3-4864-9269-643ca65cb1cb",
   "metadata": {},
   "source": [
    "### Histogram-based Gradient Boosting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "28907034-eea5-40f3-8b5c-3feb681d3d75",
   "metadata": {},
   "outputs": [],
   "source": [
    "hg = HistGradientBoostingClassifier()\n",
    "hg.fit(X_train, y_train)\n",
    "y_pred_hg = hg.predict(X_test)\n",
    "\n",
    "f1_hg = f1_score(y_test, y_pred_hg)\n",
    "precision_score_hg = precision_score(y_test, y_pred_hg)\n",
    "recall_hg = recall_score(y_test, y_pred_hg)\n",
    "accuracy_score_hg = accuracy_score(y_test, y_pred_hg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "7450be76-abbf-471f-8a69-80e616e741e6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy of hg: 0.8839970319069997\n",
      "precision of hg: 0.9132055378061767\n",
      "f1 of hg: 0.8797127468581688\n",
      "recall of hg : 0.8485898070262247\n"
     ]
    }
   ],
   "source": [
    "print(f\"Accuracy of hg: {accuracy_score_hg}\")\n",
    "print(f\"precision of hg: {precision_score_hg}\")\n",
    "print(f\"f1 of hg: {f1_hg}\")\n",
    "print(f\"recall of hg : {recall_hg}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2fce5722-eef5-4c36-865c-8d97ac9173b4",
   "metadata": {},
   "source": [
    "### Adaboost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "8d53d6d2-686c-4b83-9137-692656760a21",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy of adb: 0.8456591639871383\n",
      "precision of adb: 0.8576548899129545\n",
      "f1 of adb: 0.8429793658782083\n",
      "recall of adb : 0.8287976249381495\n"
     ]
    }
   ],
   "source": [
    "adb = AdaBoostClassifier()\n",
    "adb.fit(X_train, y_train)\n",
    "y_pred_adb = adb.predict(X_test)\n",
    "\n",
    "f1_adb = f1_score(y_test, y_pred_adb)\n",
    "precision_score_adb = precision_score(y_test, y_pred_adb)\n",
    "recall_adb = recall_score(y_test, y_pred_adb)\n",
    "accuracy_score_adb = accuracy_score(y_test, y_pred_adb)\n",
    "\n",
    "print(f\"Accuracy of adb: {accuracy_score_adb}\")\n",
    "print(f\"precision of adb: {precision_score_adb}\")\n",
    "print(f\"f1 of adb: {f1_adb}\")\n",
    "print(f\"recall of adb : {recall_adb}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2bf02295-e0e1-40b9-b24d-7b78302e98bd",
   "metadata": {},
   "source": [
    "## Table of evaluation matrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "2d3cbaa5-94ee-4ab0-9216-bc02f6ceaf8a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Algoritm</th>\n",
       "      <th>Accuracy</th>\n",
       "      <th>F1 score</th>\n",
       "      <th>Precision</th>\n",
       "      <th>Recall</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Logistc Regression</td>\n",
       "      <td>0.858521</td>\n",
       "      <td>0.851583</td>\n",
       "      <td>0.895254</td>\n",
       "      <td>0.811974</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>XGB</td>\n",
       "      <td>0.900569</td>\n",
       "      <td>0.899248</td>\n",
       "      <td>0.911122</td>\n",
       "      <td>0.887679</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Random Forest</td>\n",
       "      <td>0.903537</td>\n",
       "      <td>0.904271</td>\n",
       "      <td>0.897224</td>\n",
       "      <td>0.911430</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Gradient Boosting</td>\n",
       "      <td>0.862478</td>\n",
       "      <td>0.857728</td>\n",
       "      <td>0.888182</td>\n",
       "      <td>0.829292</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Decision tree</td>\n",
       "      <td>0.888944</td>\n",
       "      <td>0.890193</td>\n",
       "      <td>0.880077</td>\n",
       "      <td>0.900544</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>KNN</td>\n",
       "      <td>0.883997</td>\n",
       "      <td>0.884625</td>\n",
       "      <td>0.879648</td>\n",
       "      <td>0.889659</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Historgam Gradient Boosting</td>\n",
       "      <td>0.883997</td>\n",
       "      <td>0.879713</td>\n",
       "      <td>0.913206</td>\n",
       "      <td>0.848590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Adaboost</td>\n",
       "      <td>0.828798</td>\n",
       "      <td>0.842979</td>\n",
       "      <td>0.857655</td>\n",
       "      <td>0.828798</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      Algoritm  Accuracy  F1 score  Precision    Recall\n",
       "0           Logistc Regression  0.858521  0.851583   0.895254  0.811974\n",
       "1                          XGB  0.900569  0.899248   0.911122  0.887679\n",
       "2                Random Forest  0.903537  0.904271   0.897224  0.911430\n",
       "3            Gradient Boosting  0.862478  0.857728   0.888182  0.829292\n",
       "4                Decision tree  0.888944  0.890193   0.880077  0.900544\n",
       "5                          KNN  0.883997  0.884625   0.879648  0.889659\n",
       "6  Historgam Gradient Boosting  0.883997  0.879713   0.913206  0.848590\n",
       "7                     Adaboost  0.828798  0.842979   0.857655  0.828798"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scores = pd.DataFrame(\n",
    "    {\n",
    "        \"Algoritm\": [\n",
    "            \"Logistc Regression\",\n",
    "            \"XGB\",\n",
    "            \"Random Forest\",\n",
    "            \"Gradient Boosting\",\n",
    "            \"Decision tree\",\n",
    "            \"KNN\",\n",
    "            \"Historgam Gradient Boosting\",\n",
    "            \"Adaboost\",\n",
    "        ],\n",
    "        \"Accuracy\": [\n",
    "            accuracy_score_lg,\n",
    "            accuracy_score_xgb,\n",
    "            accuracy_score_rfc,\n",
    "            accuracy_score_gbc,\n",
    "            accuracy_score_dt,\n",
    "            accuracy_score_knn,\n",
    "            accuracy_score_hg,\n",
    "            recall_adb,\n",
    "        ],\n",
    "        \"F1 score\": [\n",
    "            f1_lg,\n",
    "            f1_xgb,\n",
    "            f1_rfc,\n",
    "            f1_gbc,\n",
    "            f1_dt,\n",
    "            f1_knn,\n",
    "            f1_hg,\n",
    "            f1_adb,\n",
    "        ],\n",
    "        \"Precision\": [\n",
    "            precision_score_lg,\n",
    "            precision_score_xgb,\n",
    "            precision_score_rfc,\n",
    "            precision_score_gbc,\n",
    "            precision_score_dt,\n",
    "            precision_score_knn,\n",
    "            precision_score_hg,\n",
    "            precision_score_adb,\n",
    "        ],\n",
    "        \"Recall\": [\n",
    "            recall_lg,\n",
    "            recall_xgb,\n",
    "            recall_rfc,\n",
    "            recall_gbc,\n",
    "            recall_df,\n",
    "            recall_knn,\n",
    "            recall_hg,\n",
    "            recall_adb,\n",
    "        ],\n",
    "    }\n",
    ")\n",
    "\n",
    "scores"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
